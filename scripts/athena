#!/bin/bash
# Athena CLI - Enhanced Unified Launcher
# A beautiful, comprehensive startup script with transgender pride colors

# Set text colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Visual elements
BOLD='\033[1m'
DIM='\033[2m'
UNDERLINE='\033[4m'

# Transgender flag colors
TRANS_BLUE='\033[38;2;91;206;250m'    # Light Blue
TRANS_PINK='\033[38;2;245;169;184m'   # Pink
TRANS_WHITE='\033[38;2;255;255;255m'  # White

# Unicode characters
CHECK_MARK='✓'
CROSS_MARK='✗'
WARNING_SIGN='⚠'
GEAR='⚙'
ROCKET='🚀'
PACKAGE='📦'
TOOL='🔧'
SPARKLES='✨'
KEY='🔑'
SHIELD='🛡️'
HEART='♥'

# Print enhanced banner
print_banner() {
    clear
    echo
    echo -e "${TRANS_BLUE}  █████╗ ████████╗██╗  ██╗███████╗███╗   ██╗ █████╗ ${NC}"
    echo -e "${TRANS_PINK} ██╔══██╗╚══██╔══╝██║  ██║██╔════╝████╗  ██║██╔══██╗${NC}"
    echo -e "${TRANS_WHITE} ███████║   ██║   ███████║█████╗  ██╔██╗ ██║███████║${NC}"
    echo -e "${TRANS_PINK} ██╔══██║   ██║   ██╔══██║██╔══╝  ██║╚██╗██║██╔══██║${NC}"
    echo -e "${TRANS_BLUE} ██║  ██║   ██║   ██║  ██║███████╗██║ ╚████║██║  ██║${NC}"
    echo -e "${TRANS_WHITE} ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝╚═╝  ╚═╝${NC}"
    echo
    echo -e "${TRANS_PINK}${BOLD}AI-Powered Malware Analysis Assistant${NC}"
    echo -e "${TRANS_BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${TRANS_WHITE}🏳️‍⚧️ Made with love ${TRANS_PINK}♥${TRANS_WHITE} Open source for all 🏳️‍⚧️${NC}"
    echo -e "${TRANS_BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo
}

# Interactive menu
show_menu() {
    echo -e "${TRANS_BLUE}${BOLD}Main Menu${NC}"
    echo -e "${TRANS_PINK}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo
    echo -e "${TRANS_WHITE}${BOLD}✨ Complete Solution:${NC}"
    echo -e "  ${GREEN}${BOLD}1${NC}) ${ROCKET} ${BOLD}Launch Athena${NC} - ${SPARKLES} Start Everything ${SPARKLES}"
    echo -e "     ${DIM}Backend + Frontend + All Services${NC}"
    echo
    echo -e "${TRANS_WHITE}${BOLD}Quick Actions:${NC}"
    echo -e "  ${GREEN}2${NC}) ${KEY} Check API Keys"
    echo -e "  ${GREEN}3${NC}) ${PACKAGE} Update Everything"
    echo
    echo -e "${TRANS_WHITE}${BOLD}Individual Components:${NC}"
    echo -e "  ${GREEN}4${NC}) 🌐 Frontend Only ${DIM}(React Native Web)${NC}"
    echo -e "  ${GREEN}5${NC}) 📱 iOS App"
    echo -e "  ${GREEN}6${NC}) 🤖 Android App"
    echo -e "  ${GREEN}7${NC}) 📲 Expo Development"
    echo -e "  ${GREEN}8${NC}) 🖥️  Backend Services Only"
    echo
    echo -e "${TRANS_WHITE}${BOLD}Platform Options:${NC}"
    echo -e "  ${GREEN}9${NC}) 🐳 Docker Compose ${DIM}(Advanced)${NC}"
    echo -e "  ${GREEN}10${NC}) ☸️  Kubernetes Deploy"
    echo
    echo -e "${TRANS_WHITE}${BOLD}Maintenance:${NC}"
    echo -e "  ${GREEN}11${NC}) ${TOOL} Run Setup"
    echo -e "  ${GREEN}12${NC}) 🧹 Clean Build Files"
    echo -e "  ${GREEN}13${NC}) ${SHIELD} Security Audit"
    echo -e "  ${GREEN}14${NC}) 🗄️  Database Setup"
    echo
    echo -e "${TRANS_WHITE}${BOLD}Testing:${NC}"
    echo -e "  ${GREEN}15${NC}) 🧪 Run All Tests"
    echo -e "  ${GREEN}16${NC}) 💪 Run Stress Test"
    echo -e "  ${GREEN}17${NC}) 📊 Run Load Tests"
    echo
    echo -e "${DIM}Type 'h' for help, 'q' to quit${NC}"
    echo
}

# Quick system check
quick_check() {
    echo -e "${TRANS_WHITE}${GEAR} Quick System Check...${NC}"

    # Check Node.js
    if command -v node &> /dev/null; then
        NODE_VERSION=$(node -v)
        echo -e "  ${GREEN}${CHECK_MARK}${NC} Node.js ${DIM}${NODE_VERSION}${NC}"
    else
        echo -e "  ${RED}${CROSS_MARK}${NC} Node.js not found"
    fi

    # Check npm
    if command -v npm &> /dev/null; then
        NPM_VERSION=$(npm -v)
        echo -e "  ${GREEN}${CHECK_MARK}${NC} npm ${DIM}${NPM_VERSION}${NC}"
    else
        echo -e "  ${RED}${CROSS_MARK}${NC} npm not found"
    fi

    # Check if in correct directory
    if [ -d "Athena" ]; then
        echo -e "  ${GREEN}${CHECK_MARK}${NC} Athena directory found"
    else
        echo -e "  ${RED}${CROSS_MARK}${NC} Not in Athena root directory"
        return 1
    fi

    # Check for .env file
    if [ -f "Athena/.env" ]; then
        echo -e "  ${GREEN}${CHECK_MARK}${NC} Environment configured"
    else
        echo -e "  ${YELLOW}${WARNING_SIGN}${NC} No .env file (run API key check)"
    fi

    echo
    return 0
}

# Launch complete Athena platform
launch_complete_athena() {
    echo -e "\n${TRANS_BLUE}${ROCKET} ${BOLD}Launching Complete Athena Platform${NC}"
    echo -e "${TRANS_PINK}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${TRANS_WHITE}${SPARKLES} Starting all services with Docker Compose... ${SPARKLES}${NC}\n"
    
    # Check for Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}${CROSS_MARK} Docker is required but not installed${NC}"
        echo -e "${YELLOW}${WARNING_SIGN} Please install Docker to use this feature${NC}"
        return 1
    fi
    
    # Check for docker-compose.yml
    if [ ! -f "docker-compose.yml" ]; then
        echo -e "${RED}${CROSS_MARK} docker-compose.yml not found${NC}"
        return 1
    fi
    
    # Check environment setup
    if [ ! -f ".env" ]; then
        echo -e "${YELLOW}${WARNING_SIGN} No .env file found${NC}"
        echo -e "${CYAN}Creating .env from template...${NC}"
        if [ -f ".env.example" ]; then
            cp .env.example .env
        else
            cat > .env << EOF
# AI Provider Keys
CLAUDE_API_KEY=
DEEPSEEK_API_KEY=
OPENAI_API_KEY=

# Redis Configuration
REDIS_PASSWORD=

# Server Configuration
PORT=3000
NODE_ENV=development
EOF
        fi
        echo -e "${GREEN}${CHECK_MARK} Created .env file${NC}"
        echo -e "${YELLOW}${KEY} Please add your API keys to .env file${NC}"
        echo -e "${DIM}Press Enter to continue...${NC}"
        read
    fi
    
    echo -e "\n${TRANS_WHITE}${SPARKLES} Step 1: ${GEAR} Launching Docker Compose stack...${NC}"
    echo -e "${TRANS_PINK}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    
    # Stop any existing containers
    docker-compose down 2>/dev/null || true
    
    # Start all services with Docker Compose
    echo -e "${CYAN}🐳 Starting services:${NC}"
    echo -e "  ${GREEN}✨ Redis${NC} - High-performance cache"
    echo -e "  ${GREEN}✨ API Server${NC} - Backend services with WASM support"
    echo -e "  ${GREEN}✨ Prometheus${NC} - Metrics collection"
    echo -e "  ${GREEN}✨ Grafana${NC} - Performance dashboards"
    echo
    
    docker-compose up -d
    
    # Wait for services to be ready
    echo -e "\n${CYAN}${SPARKLES} Waiting for services to be ready...${NC}"
    local attempts=0
    while [ $attempts -lt 30 ]; do
        if curl -s http://localhost:3000/api/v1/health > /dev/null 2>&1; then
            echo -e "${GREEN}${CHECK_MARK} Backend API ready!${NC}"
            break
        fi
        sleep 2
        attempts=$((attempts + 1))
        echo -n "✨"
    done
    echo
    
    # Show service URLs
    echo -e "\n${TRANS_PINK}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${TRANS_WHITE}${SPARKLES} Athena Services Running! ${SPARKLES}${NC}"
    echo -e "${TRANS_PINK}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo
    echo -e "${CYAN}🌟 Service URLs:${NC}"
    echo -e "  ${GREEN}Backend API:${NC}  http://localhost:3000"
    echo -e "  ${GREEN}Prometheus:${NC}   http://localhost:9091"
    echo -e "  ${GREEN}Grafana:${NC}      http://localhost:3001 ${DIM}(admin/admin)${NC}"
    echo
    
    # Check if we should start frontend
    echo -e "${TRANS_WHITE}${SPARKLES} Step 2: 🌐 Starting frontend...${NC}"
    
    # Check for Athena directory and dependencies
    if [ -d "Athena" ]; then
        cd Athena
        
        if [ ! -d "node_modules" ]; then
            echo -e "${YELLOW}${PACKAGE} Installing frontend dependencies...${NC}"
            npm install
            echo
        fi
        
        echo -e "${TRANS_BLUE}${BOLD}Frontend launching in your browser!${NC}"
        echo -e "${YELLOW}Press Ctrl+C to stop all services${NC}"
        echo
        
        # Start the frontend (Expo Web)
        npm run web
        
        cd ..
    else
        echo -e "${YELLOW}${WARNING_SIGN} Frontend directory not found${NC}"
        echo -e "${CYAN}Backend services are running!${NC}"
        echo
        echo -e "${YELLOW}To stop services: ${NC}docker-compose down"
        echo -e "${DIM}Press Enter to return to menu...${NC}"
        read
    fi
    
    # Cleanup on exit
    echo -e "\n${YELLOW}${WARNING_SIGN} Shutting down services...${NC}"
    docker-compose down
    echo -e "${GREEN}${CHECK_MARK} All services stopped${NC}"
}

# Run security audit
run_security_audit() {
    echo -e "${TRANS_BLUE}${SHIELD} ${BOLD}Security Audit${NC}"
    echo -e "${TRANS_PINK}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo

    cd Athena
    echo -e "${TRANS_WHITE}Running npm audit...${NC}"
    npm audit

    echo
    echo -e "${TRANS_WHITE}Checking for exposed secrets...${NC}"
    if command -v git &> /dev/null; then
        # Check for common secret patterns
        git grep -i -E "(api[_-]?key|secret|password|token)" --cached | grep -v -E "(\.md|\.txt|\.example|test)" | head -10
        if [ $? -eq 0 ]; then
            echo -e "${YELLOW}${WARNING_SIGN} Potential secrets found in code${NC}"
        else
            echo -e "${GREEN}${CHECK_MARK} No obvious secrets in code${NC}"
        fi
    fi

    cd ..
    echo
    echo -e "${DIM}Press Enter to continue...${NC}"
    read
}

# Run all tests
run_all_tests() {
    echo -e "${TRANS_BLUE}🧪 ${BOLD}Running Test Suite${NC}"
    echo -e "${TRANS_PINK}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo

    cd Athena

    echo -e "${TRANS_WHITE}1. Unit Tests${NC}"
    npm run test:unit

    echo -e "\n${TRANS_WHITE}2. Integration Tests${NC}"
    npm run test:integration

    echo -e "\n${TRANS_WHITE}3. Component Tests${NC}"
    npm run test:components

    cd ..
    echo
    echo -e "${DIM}Press Enter to continue...${NC}"
    read
}

# Main execution loop
main() {
    print_banner

    if ! quick_check; then
        echo -e "${RED}Please run this script from the Athena repository root${NC}"
        exit 1
    fi

    while true; do
        show_menu

        echo -e -n "${TRANS_BLUE}Select an option: ${NC}"
        read choice

        case $choice in
            1)
                launch_complete_athena
                ;;
            2)
                echo -e "\n${KEY} Checking API Keys..."
                node scripts/check-api-keys.js
                echo -e "${DIM}Press Enter to continue...${NC}"
                read
                ;;
            3)
                echo -e "\n${PACKAGE} Updating Everything..."
                ./scripts/run.sh update
                echo -e "${DIM}Press Enter to continue...${NC}"
                read
                ;;
            4)
                echo -e "\n🌐 Starting Frontend Only..."
                ./scripts/start-web-ui.sh
                ;;
            5)
                echo -e "\n📱 Starting iOS Version..."
                ./scripts/run.sh ios
                ;;
            6)
                echo -e "\n🤖 Starting Android Version..."
                ./scripts/run.sh android
                ;;
            7)
                echo -e "\n📲 Starting Expo Development..."
                ./scripts/run.sh expo
                ;;
            8)
                echo -e "\n🖥️  Starting Backend Services Only..."
                ./scripts/start-all-services.sh
                ;;
            9)
                echo -e "\n🐳 Launching with Docker Compose..."
                ./scripts/launch-athena.sh
                ;;
            10)
                echo -e "\n☸️  Deploying to Kubernetes..."
                ./scripts/launch-athena.sh
                echo -e "${DIM}Select option 3 when prompted${NC}"
                sleep 2
                ;;
            11)
                echo -e "\n${TOOL} Running Setup..."
                ./scripts/run.sh setup
                echo -e "${DIM}Press Enter to continue...${NC}"
                read
                ;;
            12)
                echo -e "\n🧹 Cleaning Build Files..."
                ./scripts/run.sh clean
                echo -e "${DIM}Press Enter to continue...${NC}"
                read
                ;;
            13)
                run_security_audit
                ;;
            14)
                echo -e "\n🗄️  Setting up Database..."
                cd Athena && ./scripts/setup-db.sh
                cd ..
                echo -e "${DIM}Press Enter to continue...${NC}"
                read
                ;;
            15)
                run_all_tests
                ;;
            16)
                echo -e "\n💪 Running Stress Test..."
                ./scripts/run-stress-test.sh
                echo -e "${DIM}Press Enter to continue...${NC}"
                read
                ;;
            17)
                echo -e "\n📊 Running Load Tests..."
                ./scripts/run-load-test.sh
                echo -e "${DIM}Press Enter to continue...${NC}"
                read
                ;;
            h|H)
                ./scripts/run.sh help
                echo -e "${DIM}Press Enter to continue...${NC}"
                read
                ;;
            q|Q)
                echo -e "\n${TRANS_WHITE}${SPARKLES} Thanks for using Athena! ${SPARKLES}${NC}"
                echo -e "${TRANS_PINK}Stay safe and analyze with pride! 🏳️‍⚧️${NC}\n"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option. Please try again.${NC}"
                sleep 1
                ;;
        esac

        clear
        print_banner
    done
}

# Check if we're in the right directory
if [ ! -d "Athena" ]; then
    echo -e "${RED}${CROSS_MARK} Athena directory not found${NC}"
    echo -e "${YELLOW}Please run from repository root${NC}"
    exit 1
fi

# Handle Ctrl+C gracefully
trap 'echo -e "\n\n${YELLOW}${WARNING_SIGN} Operation cancelled${NC}"; exit 0' INT

# Run main function
main
