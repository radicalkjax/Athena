(function() {
    var type_impls = Object.fromEntries([["etherparse",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Ipv6RawExtHeader\" class=\"impl\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#27\">Source</a><a href=\"#impl-Clone-for-Ipv6RawExtHeader\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"etherparse/struct.Ipv6RawExtHeader.html\" title=\"struct etherparse::Ipv6RawExtHeader\">Ipv6RawExtHeader</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#27\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"etherparse/struct.Ipv6RawExtHeader.html\" title=\"struct etherparse::Ipv6RawExtHeader\">Ipv6RawExtHeader</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","etherparse::net::ipv6_raw_ext_header::Ipv6RawExtensionHeader"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Ipv6RawExtHeader\" class=\"impl\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#39-46\">Source</a><a href=\"#impl-Debug-for-Ipv6RawExtHeader\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"etherparse/struct.Ipv6RawExtHeader.html\" title=\"struct etherparse::Ipv6RawExtHeader\">Ipv6RawExtHeader</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#40-45\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","etherparse::net::ipv6_raw_ext_header::Ipv6RawExtensionHeader"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Ipv6RawExtHeader\" class=\"impl\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#56-64\">Source</a><a href=\"#impl-Default-for-Ipv6RawExtHeader\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"etherparse/struct.Ipv6RawExtHeader.html\" title=\"struct etherparse::Ipv6RawExtHeader\">Ipv6RawExtHeader</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#57-63\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.87.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","etherparse::net::ipv6_raw_ext_header::Ipv6RawExtensionHeader"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ipv6RawExtHeader\" class=\"impl\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#66-240\">Source</a><a href=\"#impl-Ipv6RawExtHeader\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"etherparse/struct.Ipv6RawExtHeader.html\" title=\"struct etherparse::Ipv6RawExtHeader\">Ipv6RawExtHeader</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN_LEN\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#68\">Source</a><h4 class=\"code-header\">pub const <a href=\"etherparse/struct.Ipv6RawExtHeader.html#associatedconstant.MIN_LEN\" class=\"constant\">MIN_LEN</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a> = 8usize</h4></section></summary><div class=\"docblock\"><p>Minimum length of an raw IPv6 extension header in bytes/octets.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX_LEN\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#76\">Source</a><h4 class=\"code-header\">pub const <a href=\"etherparse/struct.Ipv6RawExtHeader.html#associatedconstant.MAX_LEN\" class=\"constant\">MAX_LEN</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a> = 2_048usize</h4></section></summary><div class=\"docblock\"><p>Maximum length of an raw IPv6 extension header in bytes/octets.</p>\n<p>This number is calculated by multiplying the maximum “hdr ext len”\n(0xff) with 8 and adding 8. As RFC8200 states that “hdr ext len” is\ndefined as “8-bit unsigned integer. Length of the Hop-by-Hop Options\nheader in 8-octet units, not including the first 8 octets.”</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN_PAYLOAD_LEN\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#79\">Source</a><h4 class=\"code-header\">pub const <a href=\"etherparse/struct.Ipv6RawExtHeader.html#associatedconstant.MIN_PAYLOAD_LEN\" class=\"constant\">MIN_PAYLOAD_LEN</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a> = 6usize</h4></section></summary><div class=\"docblock\"><p>Minimum length of a <a href=\"etherparse/struct.Ipv6RawExtHeader.html\" title=\"struct etherparse::Ipv6RawExtHeader\">Ipv6RawExtHeader</a> payload</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX_PAYLOAD_LEN\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#82\">Source</a><h4 class=\"code-header\">pub const <a href=\"etherparse/struct.Ipv6RawExtHeader.html#associatedconstant.MAX_PAYLOAD_LEN\" class=\"constant\">MAX_PAYLOAD_LEN</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a> = 2_046usize</h4></section></summary><div class=\"docblock\"><p>Maximum length of a <a href=\"etherparse/struct.Ipv6RawExtHeader.html\" title=\"struct etherparse::Ipv6RawExtHeader\">Ipv6RawExtHeader</a> the payload</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.header_type_supported\" class=\"method\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#85-91\">Source</a><h4 class=\"code-header\">pub fn <a href=\"etherparse/struct.Ipv6RawExtHeader.html#tymethod.header_type_supported\" class=\"fn\">header_type_supported</a>(next_header: <a class=\"struct\" href=\"etherparse/struct.IpNumber.html\" title=\"struct etherparse::IpNumber\">IpNumber</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the given header type ip number can be represented in an <code>Ipv6ExtensionHeader</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_raw\" class=\"method\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#105-125\">Source</a><h4 class=\"code-header\">pub fn <a href=\"etherparse/struct.Ipv6RawExtHeader.html#tymethod.new_raw\" class=\"fn\">new_raw</a>(\n    next_header: <a class=\"struct\" href=\"etherparse/struct.IpNumber.html\" title=\"struct etherparse::IpNumber\">IpNumber</a>,\n    payload: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"etherparse/struct.Ipv6RawExtHeader.html\" title=\"struct etherparse::Ipv6RawExtHeader\">Ipv6RawExtHeader</a>, <a class=\"enum\" href=\"etherparse/err/ipv6_exts/enum.ExtPayloadLenError.html\" title=\"enum etherparse::err::ipv6_exts::ExtPayloadLenError\">ExtPayloadLenError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an generic IPv6 extension header with the given data.</p>\n<h5 id=\"arguments\"><a class=\"doc-anchor\" href=\"#arguments\">§</a>Arguments</h5>\n<ul>\n<li><code>next_header</code> - type of content after this header (protocol number)</li>\n<li><code>payload</code> - slice containing the data of the header. This must NOT contain the <code>next header</code> and <code>extended header length</code> fields of the header.</li>\n</ul>\n<p>Note that <code>payload</code> must have at least the length of 6 bytes and only supports\nlength increases in steps of 8. This measn that the following expression must be true <code>(payload.len() + 2) % 8 == 0</code>.\nThe maximum length of the payload is <code>2046</code> bytes (<a href=\"etherparse/struct.Ipv6RawExtHeader.html#associatedconstant.MAX_PAYLOAD_LEN\" title=\"associated constant etherparse::Ipv6RawExtHeader::MAX_PAYLOAD_LEN\"><code>Ipv6RawExtHeader::MAX_PAYLOAD_LEN</code></a>).</p>\n<p>If a payload with a non supported length is provided a <a href=\"etherparse/err/ipv6_exts/enum.ExtPayloadLenError.html\" title=\"enum etherparse::err::ipv6_exts::ExtPayloadLenError\"><code>crate::err::ipv6_exts::ExtPayloadLenError</code></a> is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#128-133\">Source</a><h4 class=\"code-header\">pub fn <a href=\"etherparse/struct.Ipv6RawExtHeader.html#tymethod.from_slice\" class=\"fn\">from_slice</a>(slice: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"etherparse/struct.Ipv6RawExtHeader.html\" title=\"struct etherparse::Ipv6RawExtHeader\">Ipv6RawExtHeader</a>, &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u8.html\">u8</a>]), <a class=\"struct\" href=\"etherparse/err/struct.LenError.html\" title=\"struct etherparse::err::LenError\">LenError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Read an Ipv6ExtensionHeader from a slice and return the header &amp; unused parts of the slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.payload\" class=\"method\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#138-140\">Source</a><h4 class=\"code-header\">pub fn <a href=\"etherparse/struct.Ipv6RawExtHeader.html#tymethod.payload\" class=\"fn\">payload</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return a slice containing the current payload. This does NOT contain\nthe <code>next_header</code> and <code>header_length</code> fields. But everything after these\ntwo fields.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_payload\" class=\"method\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#149-162\">Source</a><h4 class=\"code-header\">pub fn <a href=\"etherparse/struct.Ipv6RawExtHeader.html#tymethod.set_payload\" class=\"fn\">set_payload</a>(&amp;mut self, payload: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"etherparse/err/ipv6_exts/enum.ExtPayloadLenError.html\" title=\"enum etherparse::err::ipv6_exts::ExtPayloadLenError\">ExtPayloadLenError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the payload (content of the header after the <code>next_header</code> &amp; <code>header_length</code> fields).</p>\n<p>Note that <code>payload</code> must have at least the length of 6 bytes and only supports\nlength increases in steps of 8. This measn that the following expression must be true <code>(payload.len() + 2) % 8 == 0</code>.\nThe maximum length of the payload is <code>2046</code> bytes (<a href=\"etherparse/struct.Ipv6RawExtHeader.html#associatedconstant.MAX_PAYLOAD_LEN\" title=\"associated constant etherparse::Ipv6RawExtHeader::MAX_PAYLOAD_LEN\"><code>crate::Ipv6RawExtHeader::MAX_PAYLOAD_LEN</code></a>).</p>\n<p>If a payload with a non supported length is provided a <a href=\"etherparse/err/ipv6_exts/enum.ExtPayloadLenError.html\" title=\"enum etherparse::err::ipv6_exts::ExtPayloadLenError\"><code>crate::err::ipv6_exts::ExtPayloadLenError</code></a> is returned and the payload of the header is not changed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#167-185\">Source</a><h4 class=\"code-header\">pub fn <a href=\"etherparse/struct.Ipv6RawExtHeader.html#tymethod.read\" class=\"fn\">read</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/std/io/trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt;(\n    reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;mut T</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"etherparse/struct.Ipv6RawExtHeader.html\" title=\"struct etherparse::Ipv6RawExtHeader\">Ipv6RawExtHeader</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Read an fragment header from the current reader position.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_limited\" class=\"method\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#190-212\">Source</a><h4 class=\"code-header\">pub fn <a href=\"etherparse/struct.Ipv6RawExtHeader.html#tymethod.read_limited\" class=\"fn\">read_limited</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/std/io/trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt;(\n    reader: &amp;mut <a class=\"struct\" href=\"etherparse/io/struct.LimitedReader.html\" title=\"struct etherparse::io::LimitedReader\">LimitedReader</a>&lt;T&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"etherparse/struct.Ipv6RawExtHeader.html\" title=\"struct etherparse::Ipv6RawExtHeader\">Ipv6RawExtHeader</a>, <a class=\"enum\" href=\"etherparse/err/io/enum.LimitedReadError.html\" title=\"enum etherparse::err::io::LimitedReadError\">LimitedReadError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Read an fragment header from the current limited reader position.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#217-221\">Source</a><h4 class=\"code-header\">pub fn <a href=\"etherparse/struct.Ipv6RawExtHeader.html#tymethod.write\" class=\"fn\">write</a>&lt;W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt;(&amp;self, writer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;mut W</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Writes a given IPv6 extension header to the current position.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#224-234\">Source</a><h4 class=\"code-header\">pub fn <a href=\"etherparse/struct.Ipv6RawExtHeader.html#tymethod.to_bytes\" class=\"fn\">to_bytes</a>(&amp;self) -&gt; <a class=\"struct\" href=\"arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u8.html\">u8</a>, { Ipv6RawExtHeader::MAX_LEN }&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the serialized header.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.header_len\" class=\"method\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#237-239\">Source</a><h4 class=\"code-header\">pub fn <a href=\"etherparse/struct.Ipv6RawExtHeader.html#tymethod.header_len\" class=\"fn\">header_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Length of the header in bytes.</p>\n</div></details></div></details>",0,"etherparse::net::ipv6_raw_ext_header::Ipv6RawExtensionHeader"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Ipv6RawExtHeader\" class=\"impl\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#48-52\">Source</a><a href=\"#impl-PartialEq-for-Ipv6RawExtHeader\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"etherparse/struct.Ipv6RawExtHeader.html\" title=\"struct etherparse::Ipv6RawExtHeader\">Ipv6RawExtHeader</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#49-51\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","etherparse::net::ipv6_raw_ext_header::Ipv6RawExtensionHeader"],["<section id=\"impl-Eq-for-Ipv6RawExtHeader\" class=\"impl\"><a class=\"src rightside\" href=\"src/etherparse/net/ipv6_raw_ext_header.rs.html#54\">Source</a><a href=\"#impl-Eq-for-Ipv6RawExtHeader\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"etherparse/struct.Ipv6RawExtHeader.html\" title=\"struct etherparse::Ipv6RawExtHeader\">Ipv6RawExtHeader</a></h3></section>","Eq","etherparse::net::ipv6_raw_ext_header::Ipv6RawExtensionHeader"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[24279]}